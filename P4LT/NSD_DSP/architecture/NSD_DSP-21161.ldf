//-------------------------------------------------------------------------
// $Workfile: NSD_DSP-21161.ldf $
// Part of      : ETL600
// Language     : C
// Created by   : Hans Peter Rytz
// Remarks      :  
// Purpose      : 
// Copyright    : ABB Switzerland Ltd., 2004
//-------------------------------------------------------------------------
//
//-------------------------------------------------------------------------
// $Log: /branches/Source AES/P4LT/NSD_DSP/architecture/NSD_DSP-21161.ldf $
// 
// 5     29.08.06 11:42 Chhamaa
// Size of segment seg_pmco increased, seg_pmda reduced.
// 
// 1     19.01.05 15:33 Chchlee
// 
// 10    17.01.05 13:05 Chharyt
// segment seg_dma adjusted
// 
// 9     14.01.05 14:11 Chharyt
// segment seg_dma adjusted
// 
// 8     27.10.04 13:22 Plueer01
// segement seg_pmco increased
// 
// 7     5.10.04 15:12 Buhl01
// set_env.ob of library libc161.dlb now always in segment pmco
// 
// 6     30.09.04 11:03 Unp00632
// Cleaned SEARCH_DIR()
// 
// 5     21.09.04 10:33 Rytz01
// 
// 4     2.09.04 14:11 Rytz01
// One Space removed and the parser runs correctly
// 
// 3     2.09.04 11:43 Rytz01
// Segment seg_dma moved from Block0 to Block1 like on Master_DSP.
// 
// 2     7.05.04 14:36 Rytz01
// 
// 1     5.05.04 15:04 Rytz01
// 
// 7     8.04.04 16:06 Rytz01
// $OBJECTS = $COMMAND_LINE_OBJECTS;
// changed
// 
// 6     7.04.04 14:52 Rytz01
// Adjustment of the memory segments. More investigation is necessary.
// 
// 5     7.04.04 12:04 Rytz01
// First adjustment of the memory segments. More investigation is
// necessary.
// 
// 4     6.04.04 8:40 Rytz01
// 
// 3     6.04.04 8:40 Rytz01
// 1     Initial version
//-------------------------------------------------------------------------


ARCHITECTURE(ADSP-21161)

//
// ADSP-21161 Memory Map:
//   ------------------------------------------------
//   Internal memory  0x0000 0000 to 0x000f ffff
//   ------------------------------------------------
//                    0x0000 0000 to 0x0001 ffff  IOP Regs
//           Block 0  0x0002 0000 to 0x0002 1fff  Long Word (64) Addresses
//                    0x0002 2000 to 0x0002 7fff  (reserved)
//           Block 1  0x0002 8000 to 0x0002 9fff  Long Word (64) Addresses
//                    0x0002 a000 to 0x0003 ffff  (reserved)
//           Block 0  0x0004 0000 to 0x0004 3fff  Normal Word (32/48) Addresses
//                    0x0004 4000 to 0x0004 ffff  (reserved)
//           Block 1  0x0005 0000 to 0x0005 3fff  Normal Word (32/48) Addresses
//                    0x0005 4000 to 0x0007 ffff  (reserved)
//           Block 0  0x0008 0000 to 0x0008 7fff  Short Word (16) Addresses
//                    0x0008 8000 to 0x0009 ffff  (reserved)
//           Block 1  0x000a 0000 to 0x000a 7fff  Short Word (16) Addresses
//                    0x000a 8000 to 0x000f ffff  (reserved)
//   ------------------------------------------------
//   Multiproc memory 0x0010 0000 to 0x007f ffff
//   ------------------------------------------------
//                    0x0010 0000 to 0x0011 ffff  2116x ID=001 Internal memory
//                    0x0012 0000 to 0x0013 ffff  2116x ID=010 Internal memory
//                    0x0014 0000 to 0x0015 ffff  2116x ID=011 Internal memory
//                    0x0016 0000 to 0x0017 ffff  2116x ID=100 Internal memory
//                    0x0018 0000 to 0x0019 ffff  2116x ID=101 Internal memory
//                    0x001a 0000 to 0x001b ffff  2116x ID=110 Internal memory
//                    0x001c 0000 to 0x001f ffff  2116x ID=all Internal memory
//   ------------------------------------------------
//   External memory  0x0020 0000 to 0xffff ffff
//   ------------------------------------------------
//
// This architecture file allocates:
//         Internal 256 words of run-time header in memory block 0
//                  256 words of initialization code in memory block 0
//                   6K words of C code space in memory block 0
//                   3K words of C PM data space in memory block 0
//					 2K words of DMA space in memory block 0
//					
//                   8K words of C DM data space in memory block 1
//                   4K words of C heap space in memory block 1
//                   4K words of C stack space in memory block 1

// This line must be adjusted for each DSP!!!
SEARCH_DIR( $ADI_DSP\211xx\lib)

$LIBRARIES = libc161.dlb, libio.dlb, libdsp160.dlb, libcpp.dlb, libcpprt.dlb;

// Libraries from the command line are included in COMMAND_LINE_OBJECTS.
//$OBJECTS = 161_hdr.doj, $COMMAND_LINE_OBJECTS;
$OBJECTS = $COMMAND_LINE_OBJECTS;


MEMORY
{
	// Block0
	seg_rth  { TYPE(PM RAM) START(0x00040000) END(0x000400ff) WIDTH(48) }
	seg_init { TYPE(PM RAM) START(0x00040100) END(0x000401ff) WIDTH(48) }
	seg_pmco { TYPE(PM RAM) START(0x00040200) END(0x000426ff) WIDTH(48) }
	seg_pmda { TYPE(PM RAM) START(0x00043a80) END(0x00043fff) WIDTH(32) }
	// Block1
	seg_dma	 { TYPE(DM RAM) START(0x00050000) END(0x000504cf) WIDTH(32) }
	seg_dmda { TYPE(DM RAM) START(0x000504d0) END(0x00051fff) WIDTH(32) }
	seg_heap { TYPE(DM RAM) START(0x00052000) END(0x00052fff) WIDTH(32) }
	seg_stak { TYPE(DM RAM) START(0x00053000) END(0x00053fff) WIDTH(32) }

	// external SDRAM
	ext_code   { TYPE(PM RAM) START(0x00200000) END(0x0027ffff) WIDTH(48) }
	ext_dmda   { TYPE(DM RAM) START(0x00290000) END(0x002fffff) WIDTH(32) }
//	ext_config { TYPE(DM RAM) START(0x00xxxxxx) END(0x00xxxxxx) WIDTH(32) }
//	ext_FPGA1  { TYPE(DM RAM) START(0x00xxxxxx) END(0x00xxxxxx) WIDTH(32) }
}




PROCESSOR p0
{
    LINK_AGAINST( $COMMAND_LINE_LINK_AGAINST)
    OUTPUT( $COMMAND_LINE_OUTPUT_FILE )

    SECTIONS
    {
		// .text output section
		seg_rth
		{
			INPUT_SECTIONS( $OBJECTS(seg_rth) $LIBRARIES(seg_rth))
		} >seg_rth

		seg_init
		{
			ldf_seginit_space = .;
			INPUT_SECTIONS( $OBJECTS(seg_init) $LIBRARIES(seg_init))
		} >seg_init

		seg_pmco
		{
			INPUT_SECTIONS( libc161.dlb [ set_env.doj (seg_pmco) ] $OBJECTS(seg_pmco) $LIBRARIES(seg_pmco))
		} >seg_pmco

		seg_pmda
		{
			INPUT_SECTIONS( $OBJECTS(seg_pmda) $LIBRARIES(seg_pmda))
		} >seg_pmda

		seg_dma
		{
			INPUT_SECTIONS( $OBJECTS(seg_dma) $LIBRARIES(seg_dma))
		} >seg_dma

		seg_dmda
		{
			INPUT_SECTIONS( $OBJECTS(seg_dmda) $LIBRARIES(seg_dmda))
		} > seg_dmda


		stackseg
		{

			// allocate a stack for the application
			ldf_stack_space = .;
			ldf_stack_length = MEMORY_SIZEOF(seg_stak);
		} > seg_stak

		heap
		{
			// allocate a heap for the application
			ldf_heap_space = .;
			ldf_heap_length = MEMORY_SIZEOF(seg_heap);
			ldf_heap_end = ldf_heap_space + ldf_heap_length - 1;       
		} > seg_heap

		ext_code
		{
			INPUT_SECTIONS( $OBJECTS(ext_code) $LIBRARIES(seg_pmco))
		} > ext_code

		ext_dmda
		{
			INPUT_SECTIONS( $OBJECTS(ext_dmda) $LIBRARIES(ext_dmda) $LIBRARIES(seg_dmda))
		} > ext_dmda

// for further use or other DSP's
//		ext_config
//		{
//			INPUT_SECTIONS( $OBJECTS(ext_config) $LIBRARIES(ext_config))
//		} > ext_config
//
//		ext_FPGA1
//		{
//			INPUT_SECTIONS( $OBJECTS(ext_fpga) $LIBRARIES(ext_fpga))
//		} > ext_fpga
				
    }
}

